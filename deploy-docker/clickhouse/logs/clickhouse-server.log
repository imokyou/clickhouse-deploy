2025.08.08 10:04:03.899626 [ 82 ] {} <Information> Application: Starting ClickHouse 25.6.8.10 (revision: 54506, git hash: c54ce812cd4fe54c653d8cbf17b7ece6f4482deb, build id: 524E2594D8DA29544AF3919B8D968D572AADE0F7), PID 82
2025.08.08 10:04:03.900555 [ 82 ] {} <Information> Application: starting up
2025.08.08 10:04:03.900780 [ 82 ] {} <Information> Application: OS name: Linux, version: 6.6.87.2-microsoft-standard-WSL2, architecture: x86_64
2025.08.08 10:04:03.901409 [ 82 ] {} <Information> Jemalloc: Value for background_thread set to true (from true)
2025.08.08 10:04:03.928617 [ 82 ] {} <Information> Application: Available RAM: 11.68 GiB; logical cores: 6; used cores: 6.
2025.08.08 10:04:03.928981 [ 82 ] {} <Information> Application: Available CPU instruction sets: SSE, SSE2, SSE3, SSSE3, SSE41, SSE42, F16C, POPCNT, BMI1, BMI2, PCLMUL, AES, AVX, FMA, AVX2, SHA, ADX, RDRAND, RDSEED, RDTSCP, CLFLUSHOPT, CLWB, XSAVE, OSXSAVE
2025.08.08 10:04:03.930475 [ 82 ] {} <Information> CgroupsReader: Will create cgroup reader from '/sys/fs/cgroup/' (cgroups version: v2)
2025.08.08 10:04:03.933306 [ 82 ] {} <Warning> Context: Effective user of the process (clickhouse) does not match the owner of the data (1000).
2025.08.08 10:04:04.455926 [ 82 ] {} <Information> Application: Integrity check of the executable successfully passed (checksum: CA237BE3DD184C30829F9B33201F734C)
2025.08.08 10:04:04.456188 [ 82 ] {} <Information> Application: It looks like the process has no CAP_IPC_LOCK capability, binary mlock will be disabled. It could happen due to incorrect ClickHouse package installation. You could resolve the problem manually with 'sudo setcap cap_ipc_lock=+ep /usr/bin/clickhouse'. Note that it will not work on 'nosuid' mounted filesystems.
2025.08.08 10:04:04.456362 [ 82 ] {} <Information> MemoryWorker: Starting background memory thread with period of 50ms, using Cgroups as source
2025.08.08 10:04:04.456643 [ 82 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.08.08 10:04:04.509710 [ 93 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 3.42 MiB to 107.01 MiB
2025.08.08 10:04:04.524852 [ 82 ] {} <Information> Application: Lowered uncompressed cache size to 5.84 GiB because the system has limited RAM
2025.08.08 10:04:04.548604 [ 82 ] {} <Information> Application: Lowered setting 'max_server_memory_usage' to 10.51 GiB because the system has too little memory. The new value was calculated as 11.68 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio
2025.08.08 10:04:04.548776 [ 82 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 5.84 GiB (11.68 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.08.08 10:04:04.548870 [ 82 ] {} <Information> Application: Merges and mutations memory limit is set to 5.84 GiB
2025.08.08 10:04:04.549555 [ 82 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.08.08 10:04:04.549684 [ 82 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.08.08 10:04:04.549805 [ 82 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.08.08 10:04:04.549930 [ 82 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.08.08 10:04:04.550028 [ 82 ] {} <Information> Application: ConcurrencyControl limit is set to 12 CPU slots with 'fair_round_robin' scheduler
2025.08.08 10:04:04.550200 [ 82 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:04:04.551850 [ 82 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:04:04.553377 [ 82 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:04:04.556540 [ 82 ] {} <Information> Application: Listening for replica communication (interserver): http://127.0.0.1:9009
2025.08.08 10:04:04.584070 [ 82 ] {} <Error> Application: Caught exception while setting up access control.: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:04:04.585937 [ 82 ] {} <Information> Application: Shutting down storages.
2025.08.08 10:04:04.588932 [ 82 ] {} <Information> Application: Closed all listening sockets.
2025.08.08 10:04:04.589103 [ 82 ] {} <Information> Application: Closed connections to servers for tables.
2025.08.08 10:04:04.589412 [ 82 ] {} <Information> Application: Waiting for background threads
2025.08.08 10:04:04.610487 [ 82 ] {} <Information> Application: Background threads finished in 21 ms
2025.08.08 10:04:04.611147 [ 82 ] {} <Error> Application: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:04:04.611689 [ 82 ] {} <Information> Application: shutting down
2025.08.08 10:04:04.612257 [ 87 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.08.08 10:06:14.738430 [ 1 ] {} <Information> Application: Starting ClickHouse 25.6.8.10 (revision: 54506, git hash: c54ce812cd4fe54c653d8cbf17b7ece6f4482deb, build id: 524E2594D8DA29544AF3919B8D968D572AADE0F7), PID 1
2025.08.08 10:06:14.739026 [ 1 ] {} <Information> Application: starting up
2025.08.08 10:06:14.739190 [ 1 ] {} <Information> Application: OS name: Linux, version: 6.6.87.2-microsoft-standard-WSL2, architecture: x86_64
2025.08.08 10:06:14.739558 [ 1 ] {} <Information> Jemalloc: Value for background_thread set to true (from true)
2025.08.08 10:06:14.745238 [ 1 ] {} <Information> Application: Available RAM: 11.68 GiB; logical cores: 6; used cores: 6.
2025.08.08 10:06:14.745511 [ 1 ] {} <Information> Application: Available CPU instruction sets: SSE, SSE2, SSE3, SSSE3, SSE41, SSE42, F16C, POPCNT, BMI1, BMI2, PCLMUL, AES, AVX, FMA, AVX2, SHA, ADX, RDRAND, RDSEED, RDTSCP, CLFLUSHOPT, CLWB, XSAVE, OSXSAVE
2025.08.08 10:06:14.747326 [ 1 ] {} <Information> CgroupsReader: Will create cgroup reader from '/sys/fs/cgroup/' (cgroups version: v2)
2025.08.08 10:06:14.749601 [ 1 ] {} <Warning> Context: Effective user of the process (clickhouse) does not match the owner of the data (1000).
2025.08.08 10:06:14.935373 [ 1 ] {} <Information> Application: Integrity check of the executable successfully passed (checksum: CA237BE3DD184C30829F9B33201F734C)
2025.08.08 10:06:14.935933 [ 1 ] {} <Information> Application: It looks like the process has no CAP_IPC_LOCK capability, binary mlock will be disabled. It could happen due to incorrect ClickHouse package installation. You could resolve the problem manually with 'sudo setcap cap_ipc_lock=+ep /usr/bin/clickhouse'. Note that it will not work on 'nosuid' mounted filesystems.
2025.08.08 10:06:14.936227 [ 1 ] {} <Information> MemoryWorker: Starting background memory thread with period of 50ms, using Cgroups as source
2025.08.08 10:06:14.936607 [ 1 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.08.08 10:06:14.989784 [ 87 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 3.56 MiB to 106.77 MiB
2025.08.08 10:06:15.003655 [ 1 ] {} <Information> Application: Lowered uncompressed cache size to 5.84 GiB because the system has limited RAM
2025.08.08 10:06:15.026735 [ 1 ] {} <Information> Application: Lowered setting 'max_server_memory_usage' to 10.51 GiB because the system has too little memory. The new value was calculated as 11.68 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio
2025.08.08 10:06:15.026978 [ 1 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 5.84 GiB (11.68 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.08.08 10:06:15.027121 [ 1 ] {} <Information> Application: Merges and mutations memory limit is set to 5.84 GiB
2025.08.08 10:06:15.027738 [ 1 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.08.08 10:06:15.027911 [ 1 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.08.08 10:06:15.028050 [ 1 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.08.08 10:06:15.028172 [ 1 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.08.08 10:06:15.028320 [ 1 ] {} <Information> Application: ConcurrencyControl limit is set to 12 CPU slots with 'fair_round_robin' scheduler
2025.08.08 10:06:15.028454 [ 1 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:15.030698 [ 1 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:15.033397 [ 1 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:15.037237 [ 1 ] {} <Information> Application: Listening for replica communication (interserver): http://0.0.0.0:9009
2025.08.08 10:06:15.055736 [ 1 ] {} <Error> Application: Caught exception while setting up access control.: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:15.057336 [ 1 ] {} <Information> Application: Shutting down storages.
2025.08.08 10:06:15.061153 [ 1 ] {} <Information> Application: Closed all listening sockets.
2025.08.08 10:06:15.061382 [ 1 ] {} <Information> Application: Closed connections to servers for tables.
2025.08.08 10:06:15.061701 [ 1 ] {} <Information> Application: Waiting for background threads
2025.08.08 10:06:15.089928 [ 1 ] {} <Information> Application: Background threads finished in 28 ms
2025.08.08 10:06:15.092952 [ 1 ] {} <Error> Application: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:15.093527 [ 1 ] {} <Information> Application: shutting down
2025.08.08 10:06:15.094261 [ 80 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.08.08 10:06:16.413011 [ 1 ] {} <Information> Application: Starting ClickHouse 25.6.8.10 (revision: 54506, git hash: c54ce812cd4fe54c653d8cbf17b7ece6f4482deb, build id: 524E2594D8DA29544AF3919B8D968D572AADE0F7), PID 1
2025.08.08 10:06:16.413482 [ 1 ] {} <Information> Application: starting up
2025.08.08 10:06:16.413684 [ 1 ] {} <Information> Application: OS name: Linux, version: 6.6.87.2-microsoft-standard-WSL2, architecture: x86_64
2025.08.08 10:06:16.414071 [ 1 ] {} <Information> Jemalloc: Value for background_thread set to true (from true)
2025.08.08 10:06:16.419125 [ 1 ] {} <Information> Application: Available RAM: 11.68 GiB; logical cores: 6; used cores: 6.
2025.08.08 10:06:16.419370 [ 1 ] {} <Information> Application: Available CPU instruction sets: SSE, SSE2, SSE3, SSSE3, SSE41, SSE42, F16C, POPCNT, BMI1, BMI2, PCLMUL, AES, AVX, FMA, AVX2, SHA, ADX, RDRAND, RDSEED, RDTSCP, CLFLUSHOPT, CLWB, XSAVE, OSXSAVE
2025.08.08 10:06:16.420520 [ 1 ] {} <Information> CgroupsReader: Will create cgroup reader from '/sys/fs/cgroup/' (cgroups version: v2)
2025.08.08 10:06:16.422226 [ 1 ] {} <Warning> Context: Effective user of the process (clickhouse) does not match the owner of the data (1000).
2025.08.08 10:06:16.566489 [ 1 ] {} <Information> Application: Integrity check of the executable successfully passed (checksum: CA237BE3DD184C30829F9B33201F734C)
2025.08.08 10:06:16.566809 [ 1 ] {} <Information> Application: It looks like the process has no CAP_IPC_LOCK capability, binary mlock will be disabled. It could happen due to incorrect ClickHouse package installation. You could resolve the problem manually with 'sudo setcap cap_ipc_lock=+ep /usr/bin/clickhouse'. Note that it will not work on 'nosuid' mounted filesystems.
2025.08.08 10:06:16.567010 [ 1 ] {} <Information> MemoryWorker: Starting background memory thread with period of 50ms, using Cgroups as source
2025.08.08 10:06:16.567313 [ 1 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.08.08 10:06:16.620434 [ 83 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 3.98 MiB to 112.82 MiB
2025.08.08 10:06:16.626101 [ 1 ] {} <Information> Application: Lowered uncompressed cache size to 5.84 GiB because the system has limited RAM
2025.08.08 10:06:16.648329 [ 1 ] {} <Information> Application: Lowered setting 'max_server_memory_usage' to 10.51 GiB because the system has too little memory. The new value was calculated as 11.68 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio
2025.08.08 10:06:16.648632 [ 1 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 5.84 GiB (11.68 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.08.08 10:06:16.648786 [ 1 ] {} <Information> Application: Merges and mutations memory limit is set to 5.84 GiB
2025.08.08 10:06:16.649294 [ 1 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.08.08 10:06:16.649413 [ 1 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.08.08 10:06:16.649545 [ 1 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.08.08 10:06:16.649653 [ 1 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.08.08 10:06:16.649775 [ 1 ] {} <Information> Application: ConcurrencyControl limit is set to 12 CPU slots with 'fair_round_robin' scheduler
2025.08.08 10:06:16.649883 [ 1 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:16.651494 [ 1 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:16.653300 [ 1 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:16.655587 [ 1 ] {} <Information> Application: Listening for replica communication (interserver): http://0.0.0.0:9009
2025.08.08 10:06:16.671666 [ 1 ] {} <Error> Application: Caught exception while setting up access control.: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:16.673303 [ 1 ] {} <Information> Application: Shutting down storages.
2025.08.08 10:06:16.675799 [ 1 ] {} <Information> Application: Closed all listening sockets.
2025.08.08 10:06:16.675976 [ 1 ] {} <Information> Application: Closed connections to servers for tables.
2025.08.08 10:06:16.676305 [ 1 ] {} <Information> Application: Waiting for background threads
2025.08.08 10:06:16.699237 [ 1 ] {} <Information> Application: Background threads finished in 22 ms
2025.08.08 10:06:16.700023 [ 1 ] {} <Error> Application: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:16.700547 [ 1 ] {} <Information> Application: shutting down
2025.08.08 10:06:16.701076 [ 77 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.08.08 10:06:17.945187 [ 1 ] {} <Information> Application: Starting ClickHouse 25.6.8.10 (revision: 54506, git hash: c54ce812cd4fe54c653d8cbf17b7ece6f4482deb, build id: 524E2594D8DA29544AF3919B8D968D572AADE0F7), PID 1
2025.08.08 10:06:17.945580 [ 1 ] {} <Information> Application: starting up
2025.08.08 10:06:17.945736 [ 1 ] {} <Information> Application: OS name: Linux, version: 6.6.87.2-microsoft-standard-WSL2, architecture: x86_64
2025.08.08 10:06:17.946025 [ 1 ] {} <Information> Jemalloc: Value for background_thread set to true (from true)
2025.08.08 10:06:17.951059 [ 1 ] {} <Information> Application: Available RAM: 11.68 GiB; logical cores: 6; used cores: 6.
2025.08.08 10:06:17.951295 [ 1 ] {} <Information> Application: Available CPU instruction sets: SSE, SSE2, SSE3, SSSE3, SSE41, SSE42, F16C, POPCNT, BMI1, BMI2, PCLMUL, AES, AVX, FMA, AVX2, SHA, ADX, RDRAND, RDSEED, RDTSCP, CLFLUSHOPT, CLWB, XSAVE, OSXSAVE
2025.08.08 10:06:17.952159 [ 1 ] {} <Information> CgroupsReader: Will create cgroup reader from '/sys/fs/cgroup/' (cgroups version: v2)
2025.08.08 10:06:17.953731 [ 1 ] {} <Warning> Context: Effective user of the process (clickhouse) does not match the owner of the data (1000).
2025.08.08 10:06:18.109555 [ 1 ] {} <Information> Application: Integrity check of the executable successfully passed (checksum: CA237BE3DD184C30829F9B33201F734C)
2025.08.08 10:06:18.109877 [ 1 ] {} <Information> Application: It looks like the process has no CAP_IPC_LOCK capability, binary mlock will be disabled. It could happen due to incorrect ClickHouse package installation. You could resolve the problem manually with 'sudo setcap cap_ipc_lock=+ep /usr/bin/clickhouse'. Note that it will not work on 'nosuid' mounted filesystems.
2025.08.08 10:06:18.110090 [ 1 ] {} <Information> MemoryWorker: Starting background memory thread with period of 50ms, using Cgroups as source
2025.08.08 10:06:18.110472 [ 1 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.08.08 10:06:18.158201 [ 1 ] {} <Information> Application: Lowered uncompressed cache size to 5.84 GiB because the system has limited RAM
2025.08.08 10:06:18.163384 [ 84 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 4.10 MiB to 114.32 MiB
2025.08.08 10:06:18.182705 [ 1 ] {} <Information> Application: Lowered setting 'max_server_memory_usage' to 10.51 GiB because the system has too little memory. The new value was calculated as 11.68 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio
2025.08.08 10:06:18.182899 [ 1 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 5.84 GiB (11.68 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.08.08 10:06:18.183034 [ 1 ] {} <Information> Application: Merges and mutations memory limit is set to 5.84 GiB
2025.08.08 10:06:18.183486 [ 1 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.08.08 10:06:18.183614 [ 1 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.08.08 10:06:18.183728 [ 1 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.08.08 10:06:18.183813 [ 1 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.08.08 10:06:18.183910 [ 1 ] {} <Information> Application: ConcurrencyControl limit is set to 12 CPU slots with 'fair_round_robin' scheduler
2025.08.08 10:06:18.184002 [ 1 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:18.185534 [ 1 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:18.187084 [ 1 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:18.189393 [ 1 ] {} <Information> Application: Listening for replica communication (interserver): http://0.0.0.0:9009
2025.08.08 10:06:18.205216 [ 1 ] {} <Error> Application: Caught exception while setting up access control.: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:18.207068 [ 1 ] {} <Information> Application: Shutting down storages.
2025.08.08 10:06:18.209491 [ 1 ] {} <Information> Application: Closed all listening sockets.
2025.08.08 10:06:18.209684 [ 1 ] {} <Information> Application: Closed connections to servers for tables.
2025.08.08 10:06:18.210033 [ 1 ] {} <Information> Application: Waiting for background threads
2025.08.08 10:06:18.230002 [ 1 ] {} <Information> Application: Background threads finished in 19 ms
2025.08.08 10:06:18.232546 [ 1 ] {} <Error> Application: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:18.232981 [ 1 ] {} <Information> Application: shutting down
2025.08.08 10:06:18.233493 [ 79 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.08.08 10:06:19.519435 [ 1 ] {} <Information> Application: Starting ClickHouse 25.6.8.10 (revision: 54506, git hash: c54ce812cd4fe54c653d8cbf17b7ece6f4482deb, build id: 524E2594D8DA29544AF3919B8D968D572AADE0F7), PID 1
2025.08.08 10:06:19.519883 [ 1 ] {} <Information> Application: starting up
2025.08.08 10:06:19.520026 [ 1 ] {} <Information> Application: OS name: Linux, version: 6.6.87.2-microsoft-standard-WSL2, architecture: x86_64
2025.08.08 10:06:19.520409 [ 1 ] {} <Information> Jemalloc: Value for background_thread set to true (from true)
2025.08.08 10:06:19.525576 [ 1 ] {} <Information> Application: Available RAM: 11.68 GiB; logical cores: 6; used cores: 6.
2025.08.08 10:06:19.525884 [ 1 ] {} <Information> Application: Available CPU instruction sets: SSE, SSE2, SSE3, SSSE3, SSE41, SSE42, F16C, POPCNT, BMI1, BMI2, PCLMUL, AES, AVX, FMA, AVX2, SHA, ADX, RDRAND, RDSEED, RDTSCP, CLFLUSHOPT, CLWB, XSAVE, OSXSAVE
2025.08.08 10:06:19.527221 [ 1 ] {} <Information> CgroupsReader: Will create cgroup reader from '/sys/fs/cgroup/' (cgroups version: v2)
2025.08.08 10:06:19.528721 [ 1 ] {} <Warning> Context: Effective user of the process (clickhouse) does not match the owner of the data (1000).
2025.08.08 10:06:19.670863 [ 1 ] {} <Information> Application: Integrity check of the executable successfully passed (checksum: CA237BE3DD184C30829F9B33201F734C)
2025.08.08 10:06:19.671202 [ 1 ] {} <Information> Application: It looks like the process has no CAP_IPC_LOCK capability, binary mlock will be disabled. It could happen due to incorrect ClickHouse package installation. You could resolve the problem manually with 'sudo setcap cap_ipc_lock=+ep /usr/bin/clickhouse'. Note that it will not work on 'nosuid' mounted filesystems.
2025.08.08 10:06:19.671359 [ 1 ] {} <Information> MemoryWorker: Starting background memory thread with period of 50ms, using Cgroups as source
2025.08.08 10:06:19.671667 [ 1 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.08.08 10:06:19.725037 [ 81 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 3.81 MiB to 109.85 MiB
2025.08.08 10:06:19.733006 [ 1 ] {} <Information> Application: Lowered uncompressed cache size to 5.84 GiB because the system has limited RAM
2025.08.08 10:06:19.754402 [ 1 ] {} <Information> Application: Lowered setting 'max_server_memory_usage' to 10.51 GiB because the system has too little memory. The new value was calculated as 11.68 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio
2025.08.08 10:06:19.754671 [ 1 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 5.84 GiB (11.68 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.08.08 10:06:19.754874 [ 1 ] {} <Information> Application: Merges and mutations memory limit is set to 5.84 GiB
2025.08.08 10:06:19.755449 [ 1 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.08.08 10:06:19.755676 [ 1 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.08.08 10:06:19.755827 [ 1 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.08.08 10:06:19.755976 [ 1 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.08.08 10:06:19.756139 [ 1 ] {} <Information> Application: ConcurrencyControl limit is set to 12 CPU slots with 'fair_round_robin' scheduler
2025.08.08 10:06:19.756314 [ 1 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:19.758489 [ 1 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:19.760270 [ 1 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:19.762855 [ 1 ] {} <Information> Application: Listening for replica communication (interserver): http://0.0.0.0:9009
2025.08.08 10:06:19.778131 [ 1 ] {} <Error> Application: Caught exception while setting up access control.: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:19.779913 [ 1 ] {} <Information> Application: Shutting down storages.
2025.08.08 10:06:19.785153 [ 1 ] {} <Information> Application: Closed all listening sockets.
2025.08.08 10:06:19.785353 [ 1 ] {} <Information> Application: Closed connections to servers for tables.
2025.08.08 10:06:19.785684 [ 1 ] {} <Information> Application: Waiting for background threads
2025.08.08 10:06:19.812430 [ 1 ] {} <Information> Application: Background threads finished in 26 ms
2025.08.08 10:06:19.813871 [ 1 ] {} <Error> Application: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:19.814467 [ 1 ] {} <Information> Application: shutting down
2025.08.08 10:06:19.815086 [ 75 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.08.08 10:06:21.462675 [ 1 ] {} <Information> Application: Starting ClickHouse 25.6.8.10 (revision: 54506, git hash: c54ce812cd4fe54c653d8cbf17b7ece6f4482deb, build id: 524E2594D8DA29544AF3919B8D968D572AADE0F7), PID 1
2025.08.08 10:06:21.463155 [ 1 ] {} <Information> Application: starting up
2025.08.08 10:06:21.463314 [ 1 ] {} <Information> Application: OS name: Linux, version: 6.6.87.2-microsoft-standard-WSL2, architecture: x86_64
2025.08.08 10:06:21.463634 [ 1 ] {} <Information> Jemalloc: Value for background_thread set to true (from true)
2025.08.08 10:06:21.468536 [ 1 ] {} <Information> Application: Available RAM: 11.68 GiB; logical cores: 6; used cores: 6.
2025.08.08 10:06:21.468736 [ 1 ] {} <Information> Application: Available CPU instruction sets: SSE, SSE2, SSE3, SSSE3, SSE41, SSE42, F16C, POPCNT, BMI1, BMI2, PCLMUL, AES, AVX, FMA, AVX2, SHA, ADX, RDRAND, RDSEED, RDTSCP, CLFLUSHOPT, CLWB, XSAVE, OSXSAVE
2025.08.08 10:06:21.469928 [ 1 ] {} <Information> CgroupsReader: Will create cgroup reader from '/sys/fs/cgroup/' (cgroups version: v2)
2025.08.08 10:06:21.471597 [ 1 ] {} <Warning> Context: Effective user of the process (clickhouse) does not match the owner of the data (1000).
2025.08.08 10:06:21.616442 [ 1 ] {} <Information> Application: Integrity check of the executable successfully passed (checksum: CA237BE3DD184C30829F9B33201F734C)
2025.08.08 10:06:21.616770 [ 1 ] {} <Information> Application: It looks like the process has no CAP_IPC_LOCK capability, binary mlock will be disabled. It could happen due to incorrect ClickHouse package installation. You could resolve the problem manually with 'sudo setcap cap_ipc_lock=+ep /usr/bin/clickhouse'. Note that it will not work on 'nosuid' mounted filesystems.
2025.08.08 10:06:21.616933 [ 1 ] {} <Information> MemoryWorker: Starting background memory thread with period of 50ms, using Cgroups as source
2025.08.08 10:06:21.617297 [ 1 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.08.08 10:06:21.670684 [ 84 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 4.09 MiB to 114.19 MiB
2025.08.08 10:06:21.675222 [ 1 ] {} <Information> Application: Lowered uncompressed cache size to 5.84 GiB because the system has limited RAM
2025.08.08 10:06:21.699269 [ 1 ] {} <Information> Application: Lowered setting 'max_server_memory_usage' to 10.51 GiB because the system has too little memory. The new value was calculated as 11.68 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio
2025.08.08 10:06:21.699506 [ 1 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 5.84 GiB (11.68 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.08.08 10:06:21.699653 [ 1 ] {} <Information> Application: Merges and mutations memory limit is set to 5.84 GiB
2025.08.08 10:06:21.700316 [ 1 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.08.08 10:06:21.700466 [ 1 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.08.08 10:06:21.700617 [ 1 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.08.08 10:06:21.700755 [ 1 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.08.08 10:06:21.700890 [ 1 ] {} <Information> Application: ConcurrencyControl limit is set to 12 CPU slots with 'fair_round_robin' scheduler
2025.08.08 10:06:21.701030 [ 1 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:21.702724 [ 1 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:21.704320 [ 1 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:21.706570 [ 1 ] {} <Information> Application: Listening for replica communication (interserver): http://0.0.0.0:9009
2025.08.08 10:06:21.723357 [ 1 ] {} <Error> Application: Caught exception while setting up access control.: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:21.725445 [ 1 ] {} <Information> Application: Shutting down storages.
2025.08.08 10:06:21.730322 [ 1 ] {} <Information> Application: Closed all listening sockets.
2025.08.08 10:06:21.730659 [ 1 ] {} <Information> Application: Closed connections to servers for tables.
2025.08.08 10:06:21.731063 [ 1 ] {} <Information> Application: Waiting for background threads
2025.08.08 10:06:21.749107 [ 1 ] {} <Information> Application: Background threads finished in 18 ms
2025.08.08 10:06:21.750209 [ 1 ] {} <Error> Application: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:21.750740 [ 1 ] {} <Information> Application: shutting down
2025.08.08 10:06:21.751249 [ 77 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.08.08 10:06:24.222432 [ 1 ] {} <Information> Application: Starting ClickHouse 25.6.8.10 (revision: 54506, git hash: c54ce812cd4fe54c653d8cbf17b7ece6f4482deb, build id: 524E2594D8DA29544AF3919B8D968D572AADE0F7), PID 1
2025.08.08 10:06:24.223016 [ 1 ] {} <Information> Application: starting up
2025.08.08 10:06:24.223185 [ 1 ] {} <Information> Application: OS name: Linux, version: 6.6.87.2-microsoft-standard-WSL2, architecture: x86_64
2025.08.08 10:06:24.223587 [ 1 ] {} <Information> Jemalloc: Value for background_thread set to true (from true)
2025.08.08 10:06:24.229630 [ 1 ] {} <Information> Application: Available RAM: 11.68 GiB; logical cores: 6; used cores: 6.
2025.08.08 10:06:24.229941 [ 1 ] {} <Information> Application: Available CPU instruction sets: SSE, SSE2, SSE3, SSSE3, SSE41, SSE42, F16C, POPCNT, BMI1, BMI2, PCLMUL, AES, AVX, FMA, AVX2, SHA, ADX, RDRAND, RDSEED, RDTSCP, CLFLUSHOPT, CLWB, XSAVE, OSXSAVE
2025.08.08 10:06:24.231111 [ 1 ] {} <Information> CgroupsReader: Will create cgroup reader from '/sys/fs/cgroup/' (cgroups version: v2)
2025.08.08 10:06:24.232965 [ 1 ] {} <Warning> Context: Effective user of the process (clickhouse) does not match the owner of the data (1000).
2025.08.08 10:06:24.375405 [ 1 ] {} <Information> Application: Integrity check of the executable successfully passed (checksum: CA237BE3DD184C30829F9B33201F734C)
2025.08.08 10:06:24.375712 [ 1 ] {} <Information> Application: It looks like the process has no CAP_IPC_LOCK capability, binary mlock will be disabled. It could happen due to incorrect ClickHouse package installation. You could resolve the problem manually with 'sudo setcap cap_ipc_lock=+ep /usr/bin/clickhouse'. Note that it will not work on 'nosuid' mounted filesystems.
2025.08.08 10:06:24.375855 [ 1 ] {} <Information> MemoryWorker: Starting background memory thread with period of 50ms, using Cgroups as source
2025.08.08 10:06:24.376205 [ 1 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.08.08 10:06:24.429358 [ 81 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 4.00 MiB to 112.60 MiB
2025.08.08 10:06:24.435501 [ 1 ] {} <Information> Application: Lowered uncompressed cache size to 5.84 GiB because the system has limited RAM
2025.08.08 10:06:24.457922 [ 1 ] {} <Information> Application: Lowered setting 'max_server_memory_usage' to 10.51 GiB because the system has too little memory. The new value was calculated as 11.68 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio
2025.08.08 10:06:24.458173 [ 1 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 5.84 GiB (11.68 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.08.08 10:06:24.458322 [ 1 ] {} <Information> Application: Merges and mutations memory limit is set to 5.84 GiB
2025.08.08 10:06:24.459021 [ 1 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.08.08 10:06:24.459157 [ 1 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.08.08 10:06:24.459283 [ 1 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.08.08 10:06:24.459393 [ 1 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.08.08 10:06:24.459512 [ 1 ] {} <Information> Application: ConcurrencyControl limit is set to 12 CPU slots with 'fair_round_robin' scheduler
2025.08.08 10:06:24.459646 [ 1 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:24.461235 [ 1 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:24.462895 [ 1 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:24.465136 [ 1 ] {} <Information> Application: Listening for replica communication (interserver): http://0.0.0.0:9009
2025.08.08 10:06:24.481216 [ 1 ] {} <Error> Application: Caught exception while setting up access control.: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:24.483298 [ 1 ] {} <Information> Application: Shutting down storages.
2025.08.08 10:06:24.485960 [ 1 ] {} <Information> Application: Closed all listening sockets.
2025.08.08 10:06:24.486191 [ 1 ] {} <Information> Application: Closed connections to servers for tables.
2025.08.08 10:06:24.486555 [ 1 ] {} <Information> Application: Waiting for background threads
2025.08.08 10:06:24.512679 [ 1 ] {} <Information> Application: Background threads finished in 26 ms
2025.08.08 10:06:24.514546 [ 1 ] {} <Error> Application: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:24.515757 [ 1 ] {} <Information> Application: shutting down
2025.08.08 10:06:24.516372 [ 76 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.08.08 10:06:28.563265 [ 1 ] {} <Information> Application: Starting ClickHouse 25.6.8.10 (revision: 54506, git hash: c54ce812cd4fe54c653d8cbf17b7ece6f4482deb, build id: 524E2594D8DA29544AF3919B8D968D572AADE0F7), PID 1
2025.08.08 10:06:28.563686 [ 1 ] {} <Information> Application: starting up
2025.08.08 10:06:28.563893 [ 1 ] {} <Information> Application: OS name: Linux, version: 6.6.87.2-microsoft-standard-WSL2, architecture: x86_64
2025.08.08 10:06:28.564186 [ 1 ] {} <Information> Jemalloc: Value for background_thread set to true (from true)
2025.08.08 10:06:28.568978 [ 1 ] {} <Information> Application: Available RAM: 11.68 GiB; logical cores: 6; used cores: 6.
2025.08.08 10:06:28.569134 [ 1 ] {} <Information> Application: Available CPU instruction sets: SSE, SSE2, SSE3, SSSE3, SSE41, SSE42, F16C, POPCNT, BMI1, BMI2, PCLMUL, AES, AVX, FMA, AVX2, SHA, ADX, RDRAND, RDSEED, RDTSCP, CLFLUSHOPT, CLWB, XSAVE, OSXSAVE
2025.08.08 10:06:28.570141 [ 1 ] {} <Information> CgroupsReader: Will create cgroup reader from '/sys/fs/cgroup/' (cgroups version: v2)
2025.08.08 10:06:28.571962 [ 1 ] {} <Warning> Context: Effective user of the process (clickhouse) does not match the owner of the data (1000).
2025.08.08 10:06:28.717034 [ 1 ] {} <Information> Application: Integrity check of the executable successfully passed (checksum: CA237BE3DD184C30829F9B33201F734C)
2025.08.08 10:06:28.717358 [ 1 ] {} <Information> Application: It looks like the process has no CAP_IPC_LOCK capability, binary mlock will be disabled. It could happen due to incorrect ClickHouse package installation. You could resolve the problem manually with 'sudo setcap cap_ipc_lock=+ep /usr/bin/clickhouse'. Note that it will not work on 'nosuid' mounted filesystems.
2025.08.08 10:06:28.717520 [ 1 ] {} <Information> MemoryWorker: Starting background memory thread with period of 50ms, using Cgroups as source
2025.08.08 10:06:28.717809 [ 1 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.08.08 10:06:28.769572 [ 1 ] {} <Information> Application: Lowered uncompressed cache size to 5.84 GiB because the system has limited RAM
2025.08.08 10:06:28.770719 [ 90 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 4.10 MiB to 114.22 MiB
2025.08.08 10:06:28.792179 [ 1 ] {} <Information> Application: Lowered setting 'max_server_memory_usage' to 10.51 GiB because the system has too little memory. The new value was calculated as 11.68 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio
2025.08.08 10:06:28.792424 [ 1 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 5.84 GiB (11.68 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.08.08 10:06:28.792595 [ 1 ] {} <Information> Application: Merges and mutations memory limit is set to 5.84 GiB
2025.08.08 10:06:28.793099 [ 1 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.08.08 10:06:28.793247 [ 1 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.08.08 10:06:28.793351 [ 1 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.08.08 10:06:28.793461 [ 1 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.08.08 10:06:28.793557 [ 1 ] {} <Information> Application: ConcurrencyControl limit is set to 12 CPU slots with 'fair_round_robin' scheduler
2025.08.08 10:06:28.793665 [ 1 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:28.795281 [ 1 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:28.796832 [ 1 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:28.799184 [ 1 ] {} <Information> Application: Listening for replica communication (interserver): http://0.0.0.0:9009
2025.08.08 10:06:28.815147 [ 1 ] {} <Error> Application: Caught exception while setting up access control.: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:28.816884 [ 1 ] {} <Information> Application: Shutting down storages.
2025.08.08 10:06:28.819852 [ 1 ] {} <Information> Application: Closed all listening sockets.
2025.08.08 10:06:28.820029 [ 1 ] {} <Information> Application: Closed connections to servers for tables.
2025.08.08 10:06:28.820368 [ 1 ] {} <Information> Application: Waiting for background threads
2025.08.08 10:06:28.840544 [ 1 ] {} <Information> Application: Background threads finished in 20 ms
2025.08.08 10:06:28.841266 [ 1 ] {} <Error> Application: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:28.841851 [ 1 ] {} <Information> Application: shutting down
2025.08.08 10:06:28.842380 [ 83 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.08.08 10:06:36.102265 [ 1 ] {} <Information> Application: Starting ClickHouse 25.6.8.10 (revision: 54506, git hash: c54ce812cd4fe54c653d8cbf17b7ece6f4482deb, build id: 524E2594D8DA29544AF3919B8D968D572AADE0F7), PID 1
2025.08.08 10:06:36.102806 [ 1 ] {} <Information> Application: starting up
2025.08.08 10:06:36.102991 [ 1 ] {} <Information> Application: OS name: Linux, version: 6.6.87.2-microsoft-standard-WSL2, architecture: x86_64
2025.08.08 10:06:36.103387 [ 1 ] {} <Information> Jemalloc: Value for background_thread set to true (from true)
2025.08.08 10:06:36.108563 [ 1 ] {} <Information> Application: Available RAM: 11.68 GiB; logical cores: 6; used cores: 6.
2025.08.08 10:06:36.108828 [ 1 ] {} <Information> Application: Available CPU instruction sets: SSE, SSE2, SSE3, SSSE3, SSE41, SSE42, F16C, POPCNT, BMI1, BMI2, PCLMUL, AES, AVX, FMA, AVX2, SHA, ADX, RDRAND, RDSEED, RDTSCP, CLFLUSHOPT, CLWB, XSAVE, OSXSAVE
2025.08.08 10:06:36.110247 [ 1 ] {} <Information> CgroupsReader: Will create cgroup reader from '/sys/fs/cgroup/' (cgroups version: v2)
2025.08.08 10:06:36.111929 [ 1 ] {} <Warning> Context: Effective user of the process (clickhouse) does not match the owner of the data (1000).
2025.08.08 10:06:36.257432 [ 1 ] {} <Information> Application: Integrity check of the executable successfully passed (checksum: CA237BE3DD184C30829F9B33201F734C)
2025.08.08 10:06:36.257899 [ 1 ] {} <Information> Application: It looks like the process has no CAP_IPC_LOCK capability, binary mlock will be disabled. It could happen due to incorrect ClickHouse package installation. You could resolve the problem manually with 'sudo setcap cap_ipc_lock=+ep /usr/bin/clickhouse'. Note that it will not work on 'nosuid' mounted filesystems.
2025.08.08 10:06:36.258548 [ 1 ] {} <Information> MemoryWorker: Starting background memory thread with period of 50ms, using Cgroups as source
2025.08.08 10:06:36.259046 [ 1 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.08.08 10:06:36.312136 [ 84 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 4.08 MiB to 113.54 MiB
2025.08.08 10:06:36.316855 [ 1 ] {} <Information> Application: Lowered uncompressed cache size to 5.84 GiB because the system has limited RAM
2025.08.08 10:06:36.338784 [ 1 ] {} <Information> Application: Lowered setting 'max_server_memory_usage' to 10.51 GiB because the system has too little memory. The new value was calculated as 11.68 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio
2025.08.08 10:06:36.339046 [ 1 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 5.84 GiB (11.68 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.08.08 10:06:36.339187 [ 1 ] {} <Information> Application: Merges and mutations memory limit is set to 5.84 GiB
2025.08.08 10:06:36.339701 [ 1 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.08.08 10:06:36.339835 [ 1 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.08.08 10:06:36.339937 [ 1 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.08.08 10:06:36.340033 [ 1 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.08.08 10:06:36.340121 [ 1 ] {} <Information> Application: ConcurrencyControl limit is set to 12 CPU slots with 'fair_round_robin' scheduler
2025.08.08 10:06:36.340220 [ 1 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:36.341813 [ 1 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:36.343640 [ 1 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:36.345919 [ 1 ] {} <Information> Application: Listening for replica communication (interserver): http://0.0.0.0:9009
2025.08.08 10:06:36.360524 [ 1 ] {} <Error> Application: Caught exception while setting up access control.: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:36.362264 [ 1 ] {} <Information> Application: Shutting down storages.
2025.08.08 10:06:36.364557 [ 1 ] {} <Information> Application: Closed all listening sockets.
2025.08.08 10:06:36.364744 [ 1 ] {} <Information> Application: Closed connections to servers for tables.
2025.08.08 10:06:36.365045 [ 1 ] {} <Information> Application: Waiting for background threads
2025.08.08 10:06:36.384113 [ 1 ] {} <Information> Application: Background threads finished in 19 ms
2025.08.08 10:06:36.385811 [ 1 ] {} <Error> Application: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:36.386337 [ 1 ] {} <Information> Application: shutting down
2025.08.08 10:06:36.386947 [ 78 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.08.08 10:06:50.064038 [ 1 ] {} <Information> Application: Starting ClickHouse 25.6.8.10 (revision: 54506, git hash: c54ce812cd4fe54c653d8cbf17b7ece6f4482deb, build id: 524E2594D8DA29544AF3919B8D968D572AADE0F7), PID 1
2025.08.08 10:06:50.064532 [ 1 ] {} <Information> Application: starting up
2025.08.08 10:06:50.064677 [ 1 ] {} <Information> Application: OS name: Linux, version: 6.6.87.2-microsoft-standard-WSL2, architecture: x86_64
2025.08.08 10:06:50.064921 [ 1 ] {} <Information> Jemalloc: Value for background_thread set to true (from true)
2025.08.08 10:06:50.070881 [ 1 ] {} <Information> Application: Available RAM: 11.68 GiB; logical cores: 6; used cores: 6.
2025.08.08 10:06:50.071222 [ 1 ] {} <Information> Application: Available CPU instruction sets: SSE, SSE2, SSE3, SSSE3, SSE41, SSE42, F16C, POPCNT, BMI1, BMI2, PCLMUL, AES, AVX, FMA, AVX2, SHA, ADX, RDRAND, RDSEED, RDTSCP, CLFLUSHOPT, CLWB, XSAVE, OSXSAVE
2025.08.08 10:06:50.072388 [ 1 ] {} <Information> CgroupsReader: Will create cgroup reader from '/sys/fs/cgroup/' (cgroups version: v2)
2025.08.08 10:06:50.074403 [ 1 ] {} <Warning> Context: Effective user of the process (clickhouse) does not match the owner of the data (1000).
2025.08.08 10:06:50.217843 [ 1 ] {} <Information> Application: Integrity check of the executable successfully passed (checksum: CA237BE3DD184C30829F9B33201F734C)
2025.08.08 10:06:50.218194 [ 1 ] {} <Information> Application: It looks like the process has no CAP_IPC_LOCK capability, binary mlock will be disabled. It could happen due to incorrect ClickHouse package installation. You could resolve the problem manually with 'sudo setcap cap_ipc_lock=+ep /usr/bin/clickhouse'. Note that it will not work on 'nosuid' mounted filesystems.
2025.08.08 10:06:50.218439 [ 1 ] {} <Information> MemoryWorker: Starting background memory thread with period of 50ms, using Cgroups as source
2025.08.08 10:06:50.218797 [ 1 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.08.08 10:06:50.271974 [ 82 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 4.10 MiB to 114.38 MiB
2025.08.08 10:06:50.274067 [ 1 ] {} <Information> Application: Lowered uncompressed cache size to 5.84 GiB because the system has limited RAM
2025.08.08 10:06:50.296476 [ 1 ] {} <Information> Application: Lowered setting 'max_server_memory_usage' to 10.51 GiB because the system has too little memory. The new value was calculated as 11.68 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio
2025.08.08 10:06:50.296700 [ 1 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 5.84 GiB (11.68 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.08.08 10:06:50.296829 [ 1 ] {} <Information> Application: Merges and mutations memory limit is set to 5.84 GiB
2025.08.08 10:06:50.297332 [ 1 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.08.08 10:06:50.297464 [ 1 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.08.08 10:06:50.297584 [ 1 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.08.08 10:06:50.297704 [ 1 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.08.08 10:06:50.297814 [ 1 ] {} <Information> Application: ConcurrencyControl limit is set to 12 CPU slots with 'fair_round_robin' scheduler
2025.08.08 10:06:50.297943 [ 1 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:50.299624 [ 1 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:50.301179 [ 1 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:06:50.303650 [ 1 ] {} <Information> Application: Listening for replica communication (interserver): http://0.0.0.0:9009
2025.08.08 10:06:50.320193 [ 1 ] {} <Error> Application: Caught exception while setting up access control.: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:50.322135 [ 1 ] {} <Information> Application: Shutting down storages.
2025.08.08 10:06:50.326312 [ 1 ] {} <Information> Application: Closed all listening sockets.
2025.08.08 10:06:50.326557 [ 1 ] {} <Information> Application: Closed connections to servers for tables.
2025.08.08 10:06:50.326941 [ 1 ] {} <Information> Application: Waiting for background threads
2025.08.08 10:06:50.347917 [ 1 ] {} <Information> Application: Background threads finished in 20 ms
2025.08.08 10:06:50.348736 [ 1 ] {} <Error> Application: Code: 347. DB::Exception: Code: 115. DB::Exception: Setting access_management is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'default' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009d9756b
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x0000000012a0f378
4. DB::(anonymous namespace)::parseSettingsProfile(Poco::Util::AbstractConfiguration const&, String const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x0000000012b4cbc4
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x0000000012b3e0dc
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x0000000012b50a50
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eab336
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
14. Poco::Util::Application::run() @ 0x0000000018d37a86
15. DB::Server::run() @ 0x000000000ff1c710
16. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
17. main @ 0x0000000009d9352d
18. ? @ 0x0000000000029d90
19. ? @ 0x0000000000029e40
20. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build)). (CANNOT_LOAD_CONFIG), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage const&, int) @ 0x000000000fc7e42c
2. std::__unique_if<DB::Exception>::__unique_single std::make_unique[abi:ne190107]<DB::Exception, PreformattedMessage const&, int const&>(PreformattedMessage const&, int const&) @ 0x0000000015eae324
3. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000015eac000
4. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000015ea9aad
5. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012b430f1
6. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x0000000012a08af0
7. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a0c5f3
8. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x0000000012a06f19
9. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000ff31960
10. Poco::Util::Application::run() @ 0x0000000018d37a86
11. DB::Server::run() @ 0x000000000ff1c710
12. mainEntryClickHouseServer(int, char**) @ 0x000000000ff196f3
13. main @ 0x0000000009d9352d
14. ? @ 0x0000000000029d90
15. ? @ 0x0000000000029e40
16. _start @ 0x0000000006b4602e
 (version 25.6.8.10 (official build))
2025.08.08 10:06:50.349236 [ 1 ] {} <Information> Application: shutting down
2025.08.08 10:06:50.349857 [ 75 ] {} <Information> BaseDaemon: Stop SignalListener thread
2025.08.08 10:07:16.725155 [ 1 ] {} <Information> Application: Starting ClickHouse 25.6.8.10 (revision: 54506, git hash: c54ce812cd4fe54c653d8cbf17b7ece6f4482deb, build id: 524E2594D8DA29544AF3919B8D968D572AADE0F7), PID 1
2025.08.08 10:07:16.725635 [ 1 ] {} <Information> Application: starting up
2025.08.08 10:07:16.725843 [ 1 ] {} <Information> Application: OS name: Linux, version: 6.6.87.2-microsoft-standard-WSL2, architecture: x86_64
2025.08.08 10:07:16.726143 [ 1 ] {} <Information> Jemalloc: Value for background_thread set to true (from true)
2025.08.08 10:07:16.730876 [ 1 ] {} <Information> Application: Available RAM: 11.68 GiB; logical cores: 6; used cores: 6.
2025.08.08 10:07:16.731058 [ 1 ] {} <Information> Application: Available CPU instruction sets: SSE, SSE2, SSE3, SSSE3, SSE41, SSE42, F16C, POPCNT, BMI1, BMI2, PCLMUL, AES, AVX, FMA, AVX2, SHA, ADX, RDRAND, RDSEED, RDTSCP, CLFLUSHOPT, CLWB, XSAVE, OSXSAVE
2025.08.08 10:07:16.732370 [ 1 ] {} <Information> CgroupsReader: Will create cgroup reader from '/sys/fs/cgroup/' (cgroups version: v2)
2025.08.08 10:07:16.733889 [ 1 ] {} <Warning> Context: Effective user of the process (clickhouse) does not match the owner of the data (1000).
2025.08.08 10:07:16.874337 [ 1 ] {} <Information> Application: Integrity check of the executable successfully passed (checksum: CA237BE3DD184C30829F9B33201F734C)
2025.08.08 10:07:16.874678 [ 1 ] {} <Information> Application: It looks like the process has no CAP_IPC_LOCK capability, binary mlock will be disabled. It could happen due to incorrect ClickHouse package installation. You could resolve the problem manually with 'sudo setcap cap_ipc_lock=+ep /usr/bin/clickhouse'. Note that it will not work on 'nosuid' mounted filesystems.
2025.08.08 10:07:16.874884 [ 1 ] {} <Information> MemoryWorker: Starting background memory thread with period of 50ms, using Cgroups as source
2025.08.08 10:07:16.875219 [ 1 ] {} <Information> BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 512 threads
2025.08.08 10:07:16.928444 [ 84 ] {} <Information> MemoryTracker: Correcting the value of global memory tracker from 4.10 MiB to 114.00 MiB
2025.08.08 10:07:16.929409 [ 1 ] {} <Information> Application: Lowered uncompressed cache size to 5.84 GiB because the system has limited RAM
2025.08.08 10:07:16.951667 [ 1 ] {} <Information> Application: Lowered setting 'max_server_memory_usage' to 10.51 GiB because the system has too little memory. The new value was calculated as 11.68 GiB available memory * 0.90 max_server_memory_usage_to_ram_ratio
2025.08.08 10:07:16.951902 [ 1 ] {} <Information> Application: Setting merges_mutations_memory_usage_soft_limit was set to 5.84 GiB (11.68 GiB available * 0.50 merges_mutations_memory_usage_to_ram_ratio)
2025.08.08 10:07:16.952053 [ 1 ] {} <Information> Application: Merges and mutations memory limit is set to 5.84 GiB
2025.08.08 10:07:16.952636 [ 1 ] {} <Information> Application: Setting max_remote_read_network_bandwidth_for_server was set to 0
2025.08.08 10:07:16.952817 [ 1 ] {} <Information> Application: Setting max_remote_write_network_bandwidth_for_server was set to 0
2025.08.08 10:07:16.952954 [ 1 ] {} <Information> Application: Setting max_local_read_bandwidth_for_server was set to 0
2025.08.08 10:07:16.953058 [ 1 ] {} <Information> Application: Setting max_local_write_bandwidth_for_server was set to 0
2025.08.08 10:07:16.953159 [ 1 ] {} <Information> Application: ConcurrencyControl limit is set to 12 CPU slots with 'fair_round_robin' scheduler
2025.08.08 10:07:16.953268 [ 1 ] {} <Information> BackgroundSchedulePool/BgBufSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:07:16.954957 [ 1 ] {} <Information> BackgroundSchedulePool/BgMBSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:07:16.956728 [ 1 ] {} <Information> BackgroundSchedulePool/BgDistSchPool: Create BackgroundSchedulePool with 16 threads
2025.08.08 10:07:16.959578 [ 1 ] {} <Information> Application: Listening for replica communication (interserver): http://0.0.0.0:9009
2025.08.08 10:07:16.977525 [ 1 ] {} <Warning> Access(local_directory): File /var/lib/clickhouse/access/users.list doesn't exist
2025.08.08 10:07:16.977741 [ 1 ] {} <Warning> Access(local_directory): Recovering lists in directory /var/lib/clickhouse/access/
2025.08.08 10:07:16.986720 [ 1 ] {} <Information> CgroupsMemoryUsageObserver: Started cgroup current memory usage observer thread
2025.08.08 10:07:16.986942 [ 651 ] {} <Information> CgroupsMemoryUsageObserver: Memory amount initially available to the process is 11.68 GiB
2025.08.08 10:07:16.988495 [ 1 ] {} <Information> Context: Initialized background executor for merges and mutations with num_threads=16, num_tasks=32, scheduling_policy=round_robin
2025.08.08 10:07:16.989313 [ 1 ] {} <Information> Context: Initialized background executor for move operations with num_threads=8, num_tasks=8
2025.08.08 10:07:16.990767 [ 1 ] {} <Information> Context: Initialized background executor for fetches with num_threads=16, num_tasks=16
2025.08.08 10:07:16.991545 [ 1 ] {} <Information> Context: Initialized background executor for common operations (e.g. clearing old parts) with num_threads=8, num_tasks=8
2025.08.08 10:07:16.993703 [ 1 ] {} <Warning> Context: Linux is not using a fast clock source. Performance can be degraded. Check /sys/devices/system/clocksource/clocksource0/current_clocksource
2025.08.08 10:07:16.994987 [ 1 ] {} <Warning> Context: Delay accounting is not enabled, OSIOWaitMicroseconds will not be gathered. You can enable it using `echo 1 > /proc/sys/kernel/task_delayacct` or by using sysctl.
2025.08.08 10:07:16.996602 [ 1 ] {} <Information> DNSCacheUpdater: Update period 15 seconds
2025.08.08 10:07:16.996794 [ 1 ] {} <Information> Application: Loading metadata from /var/lib/clickhouse/
2025.08.08 10:07:16.997060 [ 1 ] {} <Information> Context: Database disk name: default
2025.08.08 10:07:16.997166 [ 1 ] {} <Information> Context: Database disk name: default, path: /var/lib/clickhouse/
2025.08.08 10:07:16.999163 [ 1 ] {} <Information> DatabaseAtomic (system): Metadata disk default, path /var/lib/clickhouse/
2025.08.08 10:07:17.026105 [ 1 ] {} <Information> DatabaseAtomic (system): Metadata processed, database system has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.08.08 10:07:17.026255 [ 1 ] {} <Information> TablesLoader: Parsed metadata of 0 tables in 1 databases in 0.0007162 sec
2025.08.08 10:07:17.600017 [ 1 ] {} <Information> DatabaseAtomic (default): Metadata disk default, path /var/lib/clickhouse/
2025.08.08 10:07:17.615991 [ 1 ] {} <Information> DatabaseAtomic (default): Metadata processed, database default has 0 tables, 0 dictionaries and 0 materialized views in total.
2025.08.08 10:07:17.616137 [ 1 ] {} <Information> TablesLoader: Parsed metadata of 0 tables in 1 databases in 0.0005972 sec
2025.08.08 10:07:17.616322 [ 1 ] {} <Information> loadMetadata: Start asynchronous loading of databases
2025.08.08 10:07:17.617598 [ 1 ] {} <Information> UserDefinedSQLObjectsLoaderFromDisk: Loading user defined objects from /var/lib/clickhouse/user_defined/
2025.08.08 10:07:17.618238 [ 1 ] {} <Information> WorkloadEntityDiskStorage: Loading workload entities from /var/lib/clickhouse/workload/
2025.08.08 10:07:17.618482 [ 1 ] {} <Information> Application: Tasks stats provider: procfs
2025.08.08 10:07:17.618596 [ 1 ] {} <Information> Application: It looks like the process has no CAP_SYS_NICE capability, the setting 'os_thread_priority' will have no effect. It could happen due to incorrect ClickHouse package installation. You could resolve the problem manually with 'sudo setcap cap_sys_nice=+ep /usr/bin/clickhouse'. Note that it will not work on 'nosuid' mounted filesystems.
2025.08.08 10:07:17.651185 [ 1 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.08.08 10:07:17.651386 [ 1 ] {} <Information> CertificateReloader: One of paths is empty. Cannot apply new configuration for certificates. Fill all paths and try again.
2025.08.08 10:07:17.664957 [ 1 ] {} <Information> Application: Listening for http://0.0.0.0:8123
2025.08.08 10:07:17.665178 [ 1 ] {} <Information> Application: Listening for native protocol (tcp): 0.0.0.0:9000
2025.08.08 10:07:17.665413 [ 1 ] {} <Information> Application: Listening for MySQL compatibility protocol: 0.0.0.0:9004
2025.08.08 10:07:17.665623 [ 1 ] {} <Information> Application: Listening for PostgreSQL compatibility protocol: 0.0.0.0:9005
2025.08.08 10:07:17.665735 [ 1 ] {} <Information> Application: Ready for connections.
2025.08.08 10:07:24.747396 [ 726 ] {} <Error> void DB::SystemLog<DB::AsynchronousMetricLogElement>::flushImpl(const std::vector<LogElement> &, uint64_t) [LogElement = DB::AsynchronousMetricLogElement]: Failed to flush system log system.asynchronous_metric_log with 3372 entries up to offset 3372: Code: 481. DB::ErrnoException: Cannot set modification time to file: /var/lib/clickhouse/store/88e/88e537b8-cd74-4682-a8da-b80923ef1559/tmp_insert_202508_1_1_0/: , errno: 1, strerror: Operation not permitted. (PATH_ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::ErrnoException::ErrnoException<String const&>(int, int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca855d
3. void DB::ErrnoException::throwFromPath<String const&>(int, String const&, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca81c4
4. DB::DiskLocal::setLastModified(String const&, Poco::Timestamp const&) @ 0x0000000013307706
5. DB::DataPartStorageOnDiskBase::rename(String, String, std::shared_ptr<Poco::Logger>, bool, bool) @ 0x0000000014d7d7ec
6. DB::IMergeTreeDataPart::renameTo(String const&, bool) @ 0x0000000014db961b
7. DB::MergeTreeData::preparePartForCommit(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, bool, bool) @ 0x0000000014ea0ee2
8. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*, bool) @ 0x0000000014ed91d7
9. DB::MergeTreeData::renameTempPartAndAdd(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, bool) @ 0x0000000014eda268
10. DB::MergeTreeSink::finishDelayedChunk() @ 0x00000000152b536a
11. DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000015907403
12. DB::ExceptionKeepingTransform::work() @ 0x0000000015906e5f
13. DB::ExecutionThreadContext::executeTask() @ 0x000000001566c5c2
14. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000156600c5
15. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001565f492
16. DB::SystemLog<DB::AsynchronousMetricLogElement>::savingThreadFunction() @ 0x0000000013f4edcc
17. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::SystemLogBase<DB::AsynchronousMetricLogElement>::startup()::'lambda'()>(DB::SystemLogBase<DB::AsynchronousMetricLogElement>::startup()::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000fd9afc3
18. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000fd3d992
19. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd44e5a
20. ? @ 0x0000000000094ac3
21. ? @ 0x0000000000125a04
 (version 25.6.8.10 (official build))
2025.08.08 10:07:24.850094 [ 719 ] {} <Error> void DB::SystemLog<DB::TraceLogElement>::flushImpl(const std::vector<LogElement> &, uint64_t) [LogElement = DB::TraceLogElement]: Failed to flush system log system.trace_log with 2 entries up to offset 2: Code: 481. DB::ErrnoException: Cannot set modification time to file: /var/lib/clickhouse/store/16e/16eb373b-6f74-4d9d-82a3-b6b35219baaf/tmp_insert_202508_1_1_0/: , errno: 1, strerror: Operation not permitted. (PATH_ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::ErrnoException::ErrnoException<String const&>(int, int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca855d
3. void DB::ErrnoException::throwFromPath<String const&>(int, String const&, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca81c4
4. DB::DiskLocal::setLastModified(String const&, Poco::Timestamp const&) @ 0x0000000013307706
5. DB::DataPartStorageOnDiskBase::rename(String, String, std::shared_ptr<Poco::Logger>, bool, bool) @ 0x0000000014d7d7ec
6. DB::IMergeTreeDataPart::renameTo(String const&, bool) @ 0x0000000014db961b
7. DB::MergeTreeData::preparePartForCommit(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, bool, bool) @ 0x0000000014ea0ee2
8. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*, bool) @ 0x0000000014ed91d7
9. DB::MergeTreeData::renameTempPartAndAdd(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, bool) @ 0x0000000014eda268
10. DB::MergeTreeSink::finishDelayedChunk() @ 0x00000000152b536a
11. DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000015907403
12. DB::ExceptionKeepingTransform::work() @ 0x0000000015906e5f
13. DB::ExecutionThreadContext::executeTask() @ 0x000000001566c5c2
14. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000156600c5
15. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001565f492
16. DB::SystemLog<DB::TraceLogElement>::savingThreadFunction() @ 0x0000000013f80dcc
17. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::SystemLogBase<DB::TraceLogElement>::startup()::'lambda'()>(DB::SystemLogBase<DB::TraceLogElement>::startup()::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000fd9c0c3
18. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000fd3d992
19. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd44e5a
20. ? @ 0x0000000000094ac3
21. ? @ 0x0000000000125a04
 (version 25.6.8.10 (official build))
2025.08.08 10:07:24.858809 [ 729 ] {} <Error> void DB::SystemLog<DB::ProcessorProfileLogElement>::flushImpl(const std::vector<LogElement> &, uint64_t) [LogElement = DB::ProcessorProfileLogElement]: Failed to flush system log system.processors_profile_log with 6 entries up to offset 6: Code: 481. DB::ErrnoException: Cannot set modification time to file: /var/lib/clickhouse/store/7e2/7e2832c0-f6ad-4c9e-92ce-b8c50d95c014/tmp_insert_202508_1_1_0/: , errno: 1, strerror: Operation not permitted. (PATH_ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::ErrnoException::ErrnoException<String const&>(int, int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca855d
3. void DB::ErrnoException::throwFromPath<String const&>(int, String const&, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca81c4
4. DB::DiskLocal::setLastModified(String const&, Poco::Timestamp const&) @ 0x0000000013307706
5. DB::DataPartStorageOnDiskBase::rename(String, String, std::shared_ptr<Poco::Logger>, bool, bool) @ 0x0000000014d7d7ec
6. DB::IMergeTreeDataPart::renameTo(String const&, bool) @ 0x0000000014db961b
7. DB::MergeTreeData::preparePartForCommit(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, bool, bool) @ 0x0000000014ea0ee2
8. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*, bool) @ 0x0000000014ed91d7
9. DB::MergeTreeData::renameTempPartAndAdd(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, bool) @ 0x0000000014eda268
10. DB::MergeTreeSink::finishDelayedChunk() @ 0x00000000152b536a
11. DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000015907403
12. DB::ExceptionKeepingTransform::work() @ 0x0000000015906e5f
13. DB::ExecutionThreadContext::executeTask() @ 0x000000001566c5c2
14. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000156600c5
15. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001565f492
16. DB::SystemLog<DB::ProcessorProfileLogElement>::savingThreadFunction() @ 0x0000000013f9367b
17. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::SystemLogBase<DB::ProcessorProfileLogElement>::startup()::'lambda'()>(DB::SystemLogBase<DB::ProcessorProfileLogElement>::startup()::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000fd9c723
18. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000fd3d992
19. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd44e5a
20. ? @ 0x0000000000094ac3
21. ? @ 0x0000000000125a04
 (version 25.6.8.10 (official build))
2025.08.08 10:07:24.881835 [ 724 ] {} <Error> void DB::SystemLog<DB::LatencyLogElement>::flushImpl(const std::vector<LogElement> &, uint64_t) [LogElement = DB::LatencyLogElement]: Failed to flush system log system.latency_log with 8 entries up to offset 8: Code: 481. DB::ErrnoException: Cannot set modification time to file: /var/lib/clickhouse/store/2d9/2d9cb0b9-71e4-400a-b837-3f7eaf13eba6/tmp_insert_202508_1_1_0/: , errno: 1, strerror: Operation not permitted. (PATH_ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::ErrnoException::ErrnoException<String const&>(int, int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca855d
3. void DB::ErrnoException::throwFromPath<String const&>(int, String const&, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca81c4
4. DB::DiskLocal::setLastModified(String const&, Poco::Timestamp const&) @ 0x0000000013307706
5. DB::DataPartStorageOnDiskBase::rename(String, String, std::shared_ptr<Poco::Logger>, bool, bool) @ 0x0000000014d7d7ec
6. DB::IMergeTreeDataPart::renameTo(String const&, bool) @ 0x0000000014db961b
7. DB::MergeTreeData::preparePartForCommit(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, bool, bool) @ 0x0000000014ea0ee2
8. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*, bool) @ 0x0000000014ed91d7
9. DB::MergeTreeData::renameTempPartAndAdd(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, bool) @ 0x0000000014eda268
10. DB::MergeTreeSink::finishDelayedChunk() @ 0x00000000152b536a
11. DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000015907403
12. DB::ExceptionKeepingTransform::work() @ 0x0000000015906e5f
13. DB::ExecutionThreadContext::executeTask() @ 0x000000001566c5c2
14. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000156600c5
15. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001565f492
16. DB::SystemLog<DB::LatencyLogElement>::savingThreadFunction() @ 0x000000001406546c
17. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::SystemLogBase<DB::LatencyLogElement>::startup()::'lambda'()>(DB::SystemLogBase<DB::LatencyLogElement>::startup()::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000fd9e0a3
18. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000fd3d992
19. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd44e5a
20. ? @ 0x0000000000094ac3
21. ? @ 0x0000000000125a04
 (version 25.6.8.10 (official build))
2025.08.08 10:07:24.917712 [ 721 ] {} <Error> void DB::SystemLog<DB::TextLogElement>::flushImpl(const std::vector<LogElement> &, uint64_t) [LogElement = DB::TextLogElement]: Failed to flush system log system.text_log with 58 entries up to offset 58: Code: 481. DB::ErrnoException: Cannot set modification time to file: /var/lib/clickhouse/store/81e/81efeee4-ca85-4b99-be73-64c89448dacb/tmp_insert_202508_1_1_0/: , errno: 1, strerror: Operation not permitted. (PATH_ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::ErrnoException::ErrnoException<String const&>(int, int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca855d
3. void DB::ErrnoException::throwFromPath<String const&>(int, String const&, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca81c4
4. DB::DiskLocal::setLastModified(String const&, Poco::Timestamp const&) @ 0x0000000013307706
5. DB::DataPartStorageOnDiskBase::rename(String, String, std::shared_ptr<Poco::Logger>, bool, bool) @ 0x0000000014d7d7ec
6. DB::IMergeTreeDataPart::renameTo(String const&, bool) @ 0x0000000014db961b
7. DB::MergeTreeData::preparePartForCommit(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, bool, bool) @ 0x0000000014ea0ee2
8. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*, bool) @ 0x0000000014ed91d7
9. DB::MergeTreeData::renameTempPartAndAdd(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, bool) @ 0x0000000014eda268
10. DB::MergeTreeSink::finishDelayedChunk() @ 0x00000000152b536a
11. DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000015907403
12. DB::ExceptionKeepingTransform::work() @ 0x0000000015906e5f
13. DB::ExecutionThreadContext::executeTask() @ 0x000000001566c5c2
14. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000156600c5
15. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001565f492
16. DB::SystemLog<DB::TextLogElement>::savingThreadFunction() @ 0x0000000013f99ffb
17. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::SystemLogBase<DB::TextLogElement>::startup()::'lambda'()>(DB::SystemLogBase<DB::TextLogElement>::startup()::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000fd9c943
18. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000fd3d992
19. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd44e5a
20. ? @ 0x0000000000094ac3
21. ? @ 0x0000000000125a04
 (version 25.6.8.10 (official build))
2025.08.08 10:07:25.240596 [ 717 ] {} <Error> void DB::SystemLog<DB::QueryLogElement>::flushImpl(const std::vector<LogElement> &, uint64_t) [LogElement = DB::QueryLogElement]: Failed to flush system log system.query_log with 2 entries up to offset 2: Code: 481. DB::ErrnoException: Cannot set modification time to file: /var/lib/clickhouse/store/7a1/7a1c601f-39ac-4186-9a8a-fa2949f7c9c5/tmp_insert_202508_1_1_0/: , errno: 1, strerror: Operation not permitted. (PATH_ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::ErrnoException::ErrnoException<String const&>(int, int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca855d
3. void DB::ErrnoException::throwFromPath<String const&>(int, String const&, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca81c4
4. DB::DiskLocal::setLastModified(String const&, Poco::Timestamp const&) @ 0x0000000013307706
5. DB::DataPartStorageOnDiskBase::rename(String, String, std::shared_ptr<Poco::Logger>, bool, bool) @ 0x0000000014d7d7ec
6. DB::IMergeTreeDataPart::renameTo(String const&, bool) @ 0x0000000014db961b
7. DB::MergeTreeData::preparePartForCommit(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, bool, bool) @ 0x0000000014ea0ee2
8. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*, bool) @ 0x0000000014ed91d7
9. DB::MergeTreeData::renameTempPartAndAdd(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, bool) @ 0x0000000014eda268
10. DB::MergeTreeSink::finishDelayedChunk() @ 0x00000000152b536a
11. DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000015907403
12. DB::ExceptionKeepingTransform::work() @ 0x0000000015906e5f
13. DB::ExecutionThreadContext::executeTask() @ 0x000000001566c5c2
14. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000156600c5
15. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001565f492
16. DB::SystemLog<DB::QueryLogElement>::savingThreadFunction() @ 0x0000000013f680bb
17. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::SystemLogBase<DB::QueryLogElement>::startup()::'lambda'()>(DB::SystemLogBase<DB::QueryLogElement>::startup()::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000fd9b843
18. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000fd3d992
19. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd44e5a
20. ? @ 0x0000000000094ac3
21. ? @ 0x0000000000125a04
 (version 25.6.8.10 (official build))
2025.08.08 10:07:27.696389 [ 78 ] {} <Information> Application: Received termination signal (Terminated)
2025.08.08 10:07:27.697438 [ 1 ] {} <Information> Application: Closed all listening sockets.
2025.08.08 10:07:27.697617 [ 1 ] {} <Information> Application: Closed connections.
2025.08.08 10:07:27.697791 [ 1 ] {} <Information> Application: Stopping AsyncLoader.
2025.08.08 10:07:27.698013 [ 1 ] {} <Information> CgroupsMemoryUsageObserver: Stopped cgroup current memory usage observer thread
2025.08.08 10:07:27.699852 [ 1 ] {} <Information> Application: Shutting down storages.
2025.08.08 10:07:27.765408 [ 726 ] {} <Error> void DB::SystemLog<DB::AsynchronousMetricLogElement>::flushImpl(const std::vector<LogElement> &, uint64_t) [LogElement = DB::AsynchronousMetricLogElement]: Failed to flush system log system.asynchronous_metric_log with 1398 entries up to offset 4770: Code: 481. DB::ErrnoException: Cannot set modification time to file: /var/lib/clickhouse/store/88e/88e537b8-cd74-4682-a8da-b80923ef1559/tmp_insert_202508_2_2_0/: , errno: 1, strerror: Operation not permitted. (PATH_ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::ErrnoException::ErrnoException<String const&>(int, int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca855d
3. void DB::ErrnoException::throwFromPath<String const&>(int, String const&, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca81c4
4. DB::DiskLocal::setLastModified(String const&, Poco::Timestamp const&) @ 0x0000000013307706
5. DB::DataPartStorageOnDiskBase::rename(String, String, std::shared_ptr<Poco::Logger>, bool, bool) @ 0x0000000014d7d7ec
6. DB::IMergeTreeDataPart::renameTo(String const&, bool) @ 0x0000000014db961b
7. DB::MergeTreeData::preparePartForCommit(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, bool, bool) @ 0x0000000014ea0ee2
8. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*, bool) @ 0x0000000014ed91d7
9. DB::MergeTreeData::renameTempPartAndAdd(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, bool) @ 0x0000000014eda268
10. DB::MergeTreeSink::finishDelayedChunk() @ 0x00000000152b536a
11. DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000015907403
12. DB::ExceptionKeepingTransform::work() @ 0x0000000015906e5f
13. DB::ExecutionThreadContext::executeTask() @ 0x000000001566c5c2
14. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000156600c5
15. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001565f492
16. DB::SystemLog<DB::AsynchronousMetricLogElement>::savingThreadFunction() @ 0x0000000013f4edcc
17. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::SystemLogBase<DB::AsynchronousMetricLogElement>::startup()::'lambda'()>(DB::SystemLogBase<DB::AsynchronousMetricLogElement>::startup()::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000fd9afc3
18. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000fd3d992
19. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd44e5a
20. ? @ 0x0000000000094ac3
21. ? @ 0x0000000000125a04
 (version 25.6.8.10 (official build))
2025.08.08 10:07:27.852747 [ 723 ] {} <Error> void DB::SystemLog<DB::ErrorLogElement>::flushImpl(const std::vector<LogElement> &, uint64_t) [LogElement = DB::ErrorLogElement]: Failed to flush system log system.error_log with 2 entries up to offset 2: Code: 481. DB::ErrnoException: Cannot set modification time to file: /var/lib/clickhouse/store/c83/c8391728-ed66-473e-b495-f7de82ed9520/tmp_insert_202508_1_1_0/: , errno: 1, strerror: Operation not permitted. (PATH_ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::ErrnoException::ErrnoException<String const&>(int, int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca855d
3. void DB::ErrnoException::throwFromPath<String const&>(int, String const&, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca81c4
4. DB::DiskLocal::setLastModified(String const&, Poco::Timestamp const&) @ 0x0000000013307706
5. DB::DataPartStorageOnDiskBase::rename(String, String, std::shared_ptr<Poco::Logger>, bool, bool) @ 0x0000000014d7d7ec
6. DB::IMergeTreeDataPart::renameTo(String const&, bool) @ 0x0000000014db961b
7. DB::MergeTreeData::preparePartForCommit(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, bool, bool) @ 0x0000000014ea0ee2
8. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*, bool) @ 0x0000000014ed91d7
9. DB::MergeTreeData::renameTempPartAndAdd(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, bool) @ 0x0000000014eda268
10. DB::MergeTreeSink::finishDelayedChunk() @ 0x00000000152b536a
11. DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000015907403
12. DB::ExceptionKeepingTransform::work() @ 0x0000000015906e5f
13. DB::ExecutionThreadContext::executeTask() @ 0x000000001566c5c2
14. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000156600c5
15. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001565f492
16. DB::SystemLog<DB::ErrorLogElement>::savingThreadFunction() @ 0x000000001406b9e3
17. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::SystemLogBase<DB::ErrorLogElement>::startup()::'lambda'()>(DB::SystemLogBase<DB::ErrorLogElement>::startup()::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000fd9da43
18. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000fd3d992
19. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd44e5a
20. ? @ 0x0000000000094ac3
21. ? @ 0x0000000000125a04
 (version 25.6.8.10 (official build))
2025.08.08 10:07:27.886344 [ 724 ] {} <Error> void DB::SystemLog<DB::LatencyLogElement>::flushImpl(const std::vector<LogElement> &, uint64_t) [LogElement = DB::LatencyLogElement]: Failed to flush system log system.latency_log with 3 entries up to offset 11: Code: 481. DB::ErrnoException: Cannot set modification time to file: /var/lib/clickhouse/store/2d9/2d9cb0b9-71e4-400a-b837-3f7eaf13eba6/tmp_insert_202508_2_2_0/: , errno: 1, strerror: Operation not permitted. (PATH_ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::ErrnoException::ErrnoException<String const&>(int, int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca855d
3. void DB::ErrnoException::throwFromPath<String const&>(int, String const&, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca81c4
4. DB::DiskLocal::setLastModified(String const&, Poco::Timestamp const&) @ 0x0000000013307706
5. DB::DataPartStorageOnDiskBase::rename(String, String, std::shared_ptr<Poco::Logger>, bool, bool) @ 0x0000000014d7d7ec
6. DB::IMergeTreeDataPart::renameTo(String const&, bool) @ 0x0000000014db961b
7. DB::MergeTreeData::preparePartForCommit(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, bool, bool) @ 0x0000000014ea0ee2
8. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*, bool) @ 0x0000000014ed91d7
9. DB::MergeTreeData::renameTempPartAndAdd(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, bool) @ 0x0000000014eda268
10. DB::MergeTreeSink::finishDelayedChunk() @ 0x00000000152b536a
11. DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000015907403
12. DB::ExceptionKeepingTransform::work() @ 0x0000000015906e5f
13. DB::ExecutionThreadContext::executeTask() @ 0x000000001566c5c2
14. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000156600c5
15. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001565f492
16. DB::SystemLog<DB::LatencyLogElement>::savingThreadFunction() @ 0x000000001406546c
17. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::SystemLogBase<DB::LatencyLogElement>::startup()::'lambda'()>(DB::SystemLogBase<DB::LatencyLogElement>::startup()::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000fd9e0a3
18. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000fd3d992
19. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd44e5a
20. ? @ 0x0000000000094ac3
21. ? @ 0x0000000000125a04
 (version 25.6.8.10 (official build))
2025.08.08 10:07:27.901290 [ 721 ] {} <Error> void DB::SystemLog<DB::TextLogElement>::flushImpl(const std::vector<LogElement> &, uint64_t) [LogElement = DB::TextLogElement]: Failed to flush system log system.text_log with 12 entries up to offset 70: Code: 481. DB::ErrnoException: Cannot set modification time to file: /var/lib/clickhouse/store/81e/81efeee4-ca85-4b99-be73-64c89448dacb/tmp_insert_202508_2_2_0/: , errno: 1, strerror: Operation not permitted. (PATH_ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::ErrnoException::ErrnoException<String const&>(int, int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca855d
3. void DB::ErrnoException::throwFromPath<String const&>(int, String const&, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca81c4
4. DB::DiskLocal::setLastModified(String const&, Poco::Timestamp const&) @ 0x0000000013307706
5. DB::DataPartStorageOnDiskBase::rename(String, String, std::shared_ptr<Poco::Logger>, bool, bool) @ 0x0000000014d7d7ec
6. DB::IMergeTreeDataPart::renameTo(String const&, bool) @ 0x0000000014db961b
7. DB::MergeTreeData::preparePartForCommit(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, bool, bool) @ 0x0000000014ea0ee2
8. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*, bool) @ 0x0000000014ed91d7
9. DB::MergeTreeData::renameTempPartAndAdd(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, bool) @ 0x0000000014eda268
10. DB::MergeTreeSink::finishDelayedChunk() @ 0x00000000152b536a
11. DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000015907403
12. DB::ExceptionKeepingTransform::work() @ 0x0000000015906e5f
13. DB::ExecutionThreadContext::executeTask() @ 0x000000001566c5c2
14. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000156600c5
15. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001565f492
16. DB::SystemLog<DB::TextLogElement>::savingThreadFunction() @ 0x0000000013f99ffb
17. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::SystemLogBase<DB::TextLogElement>::startup()::'lambda'()>(DB::SystemLogBase<DB::TextLogElement>::startup()::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000fd9c943
18. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000fd3d992
19. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd44e5a
20. ? @ 0x0000000000094ac3
21. ? @ 0x0000000000125a04
 (version 25.6.8.10 (official build))
2025.08.08 10:07:27.961913 [ 719 ] {} <Error> void DB::SystemLog<DB::TraceLogElement>::flushImpl(const std::vector<LogElement> &, uint64_t) [LogElement = DB::TraceLogElement]: Failed to flush system log system.trace_log with 1651 entries up to offset 1653: Code: 481. DB::ErrnoException: Cannot set modification time to file: /var/lib/clickhouse/store/16e/16eb373b-6f74-4d9d-82a3-b6b35219baaf/tmp_insert_202508_2_2_0/: , errno: 1, strerror: Operation not permitted. (PATH_ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::ErrnoException::ErrnoException<String const&>(int, int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca855d
3. void DB::ErrnoException::throwFromPath<String const&>(int, String const&, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca81c4
4. DB::DiskLocal::setLastModified(String const&, Poco::Timestamp const&) @ 0x0000000013307706
5. DB::DataPartStorageOnDiskBase::rename(String, String, std::shared_ptr<Poco::Logger>, bool, bool) @ 0x0000000014d7d7ec
6. DB::IMergeTreeDataPart::renameTo(String const&, bool) @ 0x0000000014db961b
7. DB::MergeTreeData::preparePartForCommit(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, bool, bool) @ 0x0000000014ea0ee2
8. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*, bool) @ 0x0000000014ed91d7
9. DB::MergeTreeData::renameTempPartAndAdd(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, bool) @ 0x0000000014eda268
10. DB::MergeTreeSink::finishDelayedChunk() @ 0x00000000152b536a
11. DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000015907403
12. DB::ExceptionKeepingTransform::work() @ 0x0000000015906e5f
13. DB::ExecutionThreadContext::executeTask() @ 0x000000001566c5c2
14. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000156600c5
15. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001565f492
16. DB::SystemLog<DB::TraceLogElement>::savingThreadFunction() @ 0x0000000013f80dcc
17. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::SystemLogBase<DB::TraceLogElement>::startup()::'lambda'()>(DB::SystemLogBase<DB::TraceLogElement>::startup()::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000fd9c0c3
18. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000fd3d992
19. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd44e5a
20. ? @ 0x0000000000094ac3
21. ? @ 0x0000000000125a04
 (version 25.6.8.10 (official build))
2025.08.08 10:07:31.669846 [ 722 ] {} <Error> void DB::SystemLog<DB::MetricLogElement>::flushImpl(const std::vector<LogElement> &, uint64_t) [LogElement = DB::MetricLogElement]: Failed to flush system log system.metric_log with 8 entries up to offset 8: Code: 481. DB::ErrnoException: Cannot set modification time to file: /var/lib/clickhouse/store/7a4/7a4e2071-64f5-4509-be31-4d0b02de57f7/tmp_insert_202508_1_1_0/: , errno: 1, strerror: Operation not permitted. (PATH_ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::ErrnoException::ErrnoException<String const&>(int, int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca855d
3. void DB::ErrnoException::throwFromPath<String const&>(int, String const&, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca81c4
4. DB::DiskLocal::setLastModified(String const&, Poco::Timestamp const&) @ 0x0000000013307706
5. DB::DataPartStorageOnDiskBase::rename(String, String, std::shared_ptr<Poco::Logger>, bool, bool) @ 0x0000000014d7d7ec
6. DB::IMergeTreeDataPart::renameTo(String const&, bool) @ 0x0000000014db961b
7. DB::MergeTreeData::preparePartForCommit(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, bool, bool) @ 0x0000000014ea0ee2
8. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*, bool) @ 0x0000000014ed91d7
9. DB::MergeTreeData::renameTempPartAndAdd(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, bool) @ 0x0000000014eda268
10. DB::MergeTreeSink::finishDelayedChunk() @ 0x00000000152b536a
11. DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000015907403
12. DB::ExceptionKeepingTransform::work() @ 0x0000000015906e5f
13. DB::ExecutionThreadContext::executeTask() @ 0x000000001566c5c2
14. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000156600c5
15. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001565f492
16. DB::SystemLog<DB::MetricLogElement>::savingThreadFunction() @ 0x0000000014057fcc
17. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::SystemLogBase<DB::MetricLogElement>::startup()::'lambda'()>(DB::SystemLogBase<DB::MetricLogElement>::startup()::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000fd9dc63
18. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000fd3d992
19. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd44e5a
20. ? @ 0x0000000000094ac3
21. ? @ 0x0000000000125a04
 (version 25.6.8.10 (official build))
2025.08.08 10:07:35.408706 [ 723 ] {} <Error> void DB::SystemLog<DB::ErrorLogElement>::flushImpl(const std::vector<LogElement> &, uint64_t) [LogElement = DB::ErrorLogElement]: Failed to flush system log system.error_log with 2 entries up to offset 4: Code: 481. DB::ErrnoException: Cannot set modification time to file: /var/lib/clickhouse/store/c83/c8391728-ed66-473e-b495-f7de82ed9520/tmp_insert_202508_2_2_0/: , errno: 1, strerror: Operation not permitted. (PATH_ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::ErrnoException::ErrnoException<String const&>(int, int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca855d
3. void DB::ErrnoException::throwFromPath<String const&>(int, String const&, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca81c4
4. DB::DiskLocal::setLastModified(String const&, Poco::Timestamp const&) @ 0x0000000013307706
5. DB::DataPartStorageOnDiskBase::rename(String, String, std::shared_ptr<Poco::Logger>, bool, bool) @ 0x0000000014d7d7ec
6. DB::IMergeTreeDataPart::renameTo(String const&, bool) @ 0x0000000014db961b
7. DB::MergeTreeData::preparePartForCommit(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, bool, bool) @ 0x0000000014ea0ee2
8. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*, bool) @ 0x0000000014ed91d7
9. DB::MergeTreeData::renameTempPartAndAdd(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, bool) @ 0x0000000014eda268
10. DB::MergeTreeSink::finishDelayedChunk() @ 0x00000000152b536a
11. DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000015907403
12. DB::ExceptionKeepingTransform::work() @ 0x0000000015906e5f
13. DB::ExecutionThreadContext::executeTask() @ 0x000000001566c5c2
14. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000156600c5
15. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001565f492
16. DB::SystemLog<DB::ErrorLogElement>::savingThreadFunction() @ 0x000000001406b9e3
17. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::SystemLogBase<DB::ErrorLogElement>::startup()::'lambda'()>(DB::SystemLogBase<DB::ErrorLogElement>::startup()::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000fd9da43
18. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000fd3d992
19. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd44e5a
20. ? @ 0x0000000000094ac3
21. ? @ 0x0000000000125a04
 (version 25.6.8.10 (official build))
2025.08.08 10:07:35.513379 [ 724 ] {} <Error> void DB::SystemLog<DB::LatencyLogElement>::flushImpl(const std::vector<LogElement> &, uint64_t) [LogElement = DB::LatencyLogElement]: Failed to flush system log system.latency_log with 8 entries up to offset 19: Code: 481. DB::ErrnoException: Cannot set modification time to file: /var/lib/clickhouse/store/2d9/2d9cb0b9-71e4-400a-b837-3f7eaf13eba6/tmp_insert_202508_3_3_0/: , errno: 1, strerror: Operation not permitted. (PATH_ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::ErrnoException::ErrnoException<String const&>(int, int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca855d
3. void DB::ErrnoException::throwFromPath<String const&>(int, String const&, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca81c4
4. DB::DiskLocal::setLastModified(String const&, Poco::Timestamp const&) @ 0x0000000013307706
5. DB::DataPartStorageOnDiskBase::rename(String, String, std::shared_ptr<Poco::Logger>, bool, bool) @ 0x0000000014d7d7ec
6. DB::IMergeTreeDataPart::renameTo(String const&, bool) @ 0x0000000014db961b
7. DB::MergeTreeData::preparePartForCommit(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, bool, bool) @ 0x0000000014ea0ee2
8. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*, bool) @ 0x0000000014ed91d7
9. DB::MergeTreeData::renameTempPartAndAdd(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, bool) @ 0x0000000014eda268
10. DB::MergeTreeSink::finishDelayedChunk() @ 0x00000000152b536a
11. DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000015907403
12. DB::ExceptionKeepingTransform::work() @ 0x0000000015906e5f
13. DB::ExecutionThreadContext::executeTask() @ 0x000000001566c5c2
14. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000156600c5
15. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001565f492
16. DB::SystemLog<DB::LatencyLogElement>::savingThreadFunction() @ 0x000000001406546c
17. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::SystemLogBase<DB::LatencyLogElement>::startup()::'lambda'()>(DB::SystemLogBase<DB::LatencyLogElement>::startup()::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000fd9e0a3
18. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000fd3d992
19. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd44e5a
20. ? @ 0x0000000000094ac3
21. ? @ 0x0000000000125a04
 (version 25.6.8.10 (official build))
2025.08.08 10:07:35.545628 [ 721 ] {} <Error> void DB::SystemLog<DB::TextLogElement>::flushImpl(const std::vector<LogElement> &, uint64_t) [LogElement = DB::TextLogElement]: Failed to flush system log system.text_log with 6 entries up to offset 76: Code: 481. DB::ErrnoException: Cannot set modification time to file: /var/lib/clickhouse/store/81e/81efeee4-ca85-4b99-be73-64c89448dacb/tmp_insert_202508_3_3_0/: , errno: 1, strerror: Operation not permitted. (PATH_ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::ErrnoException::ErrnoException<String const&>(int, int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca855d
3. void DB::ErrnoException::throwFromPath<String const&>(int, String const&, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca81c4
4. DB::DiskLocal::setLastModified(String const&, Poco::Timestamp const&) @ 0x0000000013307706
5. DB::DataPartStorageOnDiskBase::rename(String, String, std::shared_ptr<Poco::Logger>, bool, bool) @ 0x0000000014d7d7ec
6. DB::IMergeTreeDataPart::renameTo(String const&, bool) @ 0x0000000014db961b
7. DB::MergeTreeData::preparePartForCommit(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, bool, bool) @ 0x0000000014ea0ee2
8. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*, bool) @ 0x0000000014ed91d7
9. DB::MergeTreeData::renameTempPartAndAdd(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, bool) @ 0x0000000014eda268
10. DB::MergeTreeSink::finishDelayedChunk() @ 0x00000000152b536a
11. DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000015907403
12. DB::ExceptionKeepingTransform::work() @ 0x0000000015906e5f
13. DB::ExecutionThreadContext::executeTask() @ 0x000000001566c5c2
14. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000156600c5
15. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001565f492
16. DB::SystemLog<DB::TextLogElement>::savingThreadFunction() @ 0x0000000013f99ffb
17. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::SystemLogBase<DB::TextLogElement>::startup()::'lambda'()>(DB::SystemLogBase<DB::TextLogElement>::startup()::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000fd9c943
18. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000fd3d992
19. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd44e5a
20. ? @ 0x0000000000094ac3
21. ? @ 0x0000000000125a04
 (version 25.6.8.10 (official build))
2025.08.08 10:07:35.625973 [ 719 ] {} <Error> void DB::SystemLog<DB::TraceLogElement>::flushImpl(const std::vector<LogElement> &, uint64_t) [LogElement = DB::TraceLogElement]: Failed to flush system log system.trace_log with 900 entries up to offset 2553: Code: 481. DB::ErrnoException: Cannot set modification time to file: /var/lib/clickhouse/store/16e/16eb373b-6f74-4d9d-82a3-b6b35219baaf/tmp_insert_202508_3_3_0/: , errno: 1, strerror: Operation not permitted. (PATH_ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fbf941b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009d97a8c
2. DB::ErrnoException::ErrnoException<String const&>(int, int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca855d
3. void DB::ErrnoException::throwFromPath<String const&>(int, String const&, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000fca81c4
4. DB::DiskLocal::setLastModified(String const&, Poco::Timestamp const&) @ 0x0000000013307706
5. DB::DataPartStorageOnDiskBase::rename(String, String, std::shared_ptr<Poco::Logger>, bool, bool) @ 0x0000000014d7d7ec
6. DB::IMergeTreeDataPart::renameTo(String const&, bool) @ 0x0000000014db961b
7. DB::MergeTreeData::preparePartForCommit(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, bool, bool) @ 0x0000000014ea0ee2
8. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*, bool) @ 0x0000000014ed91d7
9. DB::MergeTreeData::renameTempPartAndAdd(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, DB::DataPartsLock&, bool) @ 0x0000000014eda268
10. DB::MergeTreeSink::finishDelayedChunk() @ 0x00000000152b536a
11. DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000015907403
12. DB::ExceptionKeepingTransform::work() @ 0x0000000015906e5f
13. DB::ExecutionThreadContext::executeTask() @ 0x000000001566c5c2
14. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000156600c5
15. DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001565f492
16. DB::SystemLog<DB::TraceLogElement>::savingThreadFunction() @ 0x0000000013f80dcc
17. void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::SystemLogBase<DB::TraceLogElement>::startup()::'lambda'()>(DB::SystemLogBase<DB::TraceLogElement>::startup()::'lambda'()&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000fd9c0c3
18. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000fd3d992
19. void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd44e5a
20. ? @ 0x0000000000094ac3
21. ? @ 0x0000000000125a04
 (version 25.6.8.10 (official build))
